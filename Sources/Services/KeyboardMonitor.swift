import Cocoa
import Carbon
import Combine

/// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à —á–µ—Ä–µ–∑ Carbon API (RegisterEventHotKey)
/// –ù–ï —Ç—Ä–µ–±—É–µ—Ç Accessibility —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è F13-F19
/// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π Emoji picker –¥–ª—è F16
public class KeyboardMonitor: ObservableObject {
    @Published public var isHotkeyPressed = false

    public var onHotkeyPress: (() -> Void)?
    public var onHotkeyRelease: (() -> Void)?

    private var hotKeyRef: EventHotKeyRef?
    private var eventHandler: EventHandlerRef?
    private var eventTap: CFMachPort?
    private var isMonitoring = false
    private var cancellables = Set<AnyCancellable>()

    // Static reference –¥–ª—è callback
    private static var shared: KeyboardMonitor?

    public init() {
        LogManager.keyboard.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è KeyboardMonitor (Carbon API)")
        KeyboardMonitor.shared = self

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è hotkey
        NotificationCenter.default.publisher(for: .hotkeyDidChange)
            .sink { [weak self] notification in
                guard let newHotkey = notification.object as? Hotkey else { return }
                LogManager.keyboard.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ hotkey –Ω–∞: \(newHotkey.displayName)")
                self?.restartMonitoring()
            }
            .store(in: &cancellables)
    }

    /// –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    public func startMonitoring() -> Bool {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        guard !isMonitoring else {
            LogManager.keyboard.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return true
        }

        let hotkey = HotkeyManager.shared.currentHotkey
        LogManager.keyboard.begin("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", details: "–∫–ª–∞–≤–∏—à–∞ \(hotkey.displayName) (keyCode: \(hotkey.keyCode))")

        // Carbon API –ù–ï —Ç—Ä–µ–±—É–µ—Ç Accessibility –¥–ª—è F13-F19
        LogManager.keyboard.info("Carbon API –Ω–µ —Ç—Ä–µ–±—É–µ—Ç Accessibility —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è F-–∫–ª–∞–≤–∏—à")

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Carbon Event Handler –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –ò –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è
        var eventTypes = [
            EventTypeSpec(eventClass: OSType(kEventClassKeyboard), eventKind: UInt32(kEventHotKeyPressed)),
            EventTypeSpec(eventClass: OSType(kEventClassKeyboard), eventKind: UInt32(kEventHotKeyReleased))
        ]
        let status = InstallEventHandler(
            GetApplicationEventTarget(),
            { (nextHandler, event, userData) -> OSStatus in
                return KeyboardMonitor.handleCarbonEvent(nextHandler: nextHandler, event: event, userData: userData)
            },
            2,  // –¢–µ–ø–µ—Ä—å 2 —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏–π
            &eventTypes,
            nil,
            &eventHandler
        )

        guard status == noErr else {
            LogManager.keyboard.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Carbon Event Handler: \(status)")
            return false
        }

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É
        let hotkeyID = EventHotKeyID(signature: OSType(0x50545400), id: 1) // 'PTT\0'
        let modifiers = carbonModifiers(from: hotkey.modifiers)

        let registerStatus = RegisterEventHotKey(
            UInt32(hotkey.keyCode),
            modifiers,
            hotkeyID,
            GetApplicationEventTarget(),
            OptionBits(kEventHotKeyExclusive),  // –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∑–∞—Ö–≤–∞—Ç - –±–ª–æ–∫–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            &hotKeyRef
        )

        guard registerStatus == noErr else {
            LogManager.keyboard.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É: \(registerStatus)")
            if let handler = eventHandler {
                RemoveEventHandler(handler)
                eventHandler = nil
            }
            return false
        }

        // –°–æ–∑–¥–∞—ë–º Event Tap –¥–ª—è –ø–æ–ª–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–ª–∞–≤–∏—à–∏ (—Ç—Ä–µ–±—É–µ—Ç Accessibility)
        setupEventTap(for: hotkey.keyCode)

        isMonitoring = true
        LogManager.keyboard.success("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω", details: "Carbon API —Å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –∑–∞—Ö–≤–∞—Ç–æ–º –¥–ª—è \(hotkey.displayName)")

        return true
    }

    /// –°–æ–∑–¥–∞—ë—Ç CGEventTap –¥–ª—è –ø–æ–ª–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–ª–∞–≤–∏—à–∏ (—Ç—Ä–µ–±—É–µ—Ç Accessibility)
    private func setupEventTap(for keyCode: UInt16) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Accessibility —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        let trusted = AXIsProcessTrusted()
        if !trusted {
            LogManager.keyboard.warning("‚ö†Ô∏è Accessibility –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ - –∫–ª–∞–≤–∏—à–∞ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (Emoji picker)")
            LogManager.keyboard.info("üí° –î–æ–±–∞–≤—å—Ç–µ PushToTalk –≤ System Settings ‚Üí Privacy & Security ‚Üí Accessibility")
            return
        }

        let eventMask = (1 << CGEventType.keyDown.rawValue) | (1 << CGEventType.keyUp.rawValue)

        // –°–æ–∑–¥–∞—ë–º —É–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ keyCode –≤ callback
        let keyCodePtr = UnsafeMutablePointer<UInt16>.allocate(capacity: 1)
        keyCodePtr.pointee = keyCode

        guard let tap = CGEvent.tapCreate(
            tap: .cgSessionEventTap,
            place: .headInsertEventTap,
            options: .defaultTap,
            eventsOfInterest: CGEventMask(eventMask),
            callback: { (proxy, type, event, refcon) -> Unmanaged<CGEvent>? in
                let eventKeyCode = event.getIntegerValueField(.keyboardEventKeycode)

                // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π keyCode
                guard let keyCodePtr = refcon?.assumingMemoryBound(to: UInt16.self) else {
                    return Unmanaged.passRetained(event)
                }
                let targetKeyCode = Int64(keyCodePtr.pointee)

                // –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞—à—É –∫–ª–∞–≤–∏—à—É
                if eventKeyCode == targetKeyCode {
                    return nil  // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å—ä–µ–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                }

                return Unmanaged.passRetained(event)
            },
            userInfo: UnsafeMutableRawPointer(keyCodePtr)
        ) else {
            keyCodePtr.deallocate()
            LogManager.keyboard.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Event Tap")
            return
        }

        let runLoopSource = CFMachPortCreateRunLoopSource(kCFAllocatorDefault, tap, 0)
        CFRunLoopAddSource(CFRunLoopGetCurrent(), runLoopSource, .commonModes)
        CGEvent.tapEnable(tap: tap, enable: true)

        self.eventTap = tap
        LogManager.keyboard.success("‚úÖ Event Tap –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - –∫–ª–∞–≤–∏—à–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –æ—Ç —Å–∏—Å—Ç–µ–º—ã")
    }


    /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    public func stopMonitoring() {
        guard isMonitoring else { return }

        LogManager.keyboard.begin("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")

        // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–∏
        if let hotKeyRef = hotKeyRef {
            UnregisterEventHotKey(hotKeyRef)
            self.hotKeyRef = nil
        }

        // –£–¥–∞–ª—è–µ–º event handler
        if let eventHandler = eventHandler {
            RemoveEventHandler(eventHandler)
            self.eventHandler = nil
        }

        // –û—Ç–∫–ª—é—á–∞–µ–º Event Tap
        if let eventTap = eventTap {
            CGEvent.tapEnable(tap: eventTap, enable: false)
            CFMachPortInvalidate(eventTap)
            self.eventTap = nil
        }

        isMonitoring = false
        LogManager.keyboard.success("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    }

    /// –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–ø—Ä–∏ —Å–º–µ–Ω–µ hotkey)
    private func restartMonitoring() {
        LogManager.keyboard.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –Ω–æ–≤–æ–π hotkey")
        stopMonitoring()
        _ = startMonitoring()
    }

    // MARK: - Carbon Event Handler

    private static func handleCarbonEvent(nextHandler: EventHandlerCallRef?, event: EventRef?, userData: UnsafeMutableRawPointer?) -> OSStatus {
        guard let monitor = KeyboardMonitor.shared else {
            return OSStatus(eventNotHandledErr)
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è (–Ω–∞–∂–∞—Ç–∏–µ –∏–ª–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ)
        var eventKind: UInt32 = 0
        GetEventParameter(
            event,
            UInt32(kEventParamKeyboardType),
            UInt32(typeUInt32),
            nil,
            MemoryLayout<UInt32>.size,
            nil,
            &eventKind
        )

        var hotKeyID = EventHotKeyID()
        let status = GetEventParameter(
            event,
            UInt32(kEventParamDirectObject),
            UInt32(typeEventHotKeyID),
            nil,
            MemoryLayout<EventHotKeyID>.size,
            nil,
            &hotKeyID
        )

        guard status == noErr else {
            return OSStatus(eventNotHandledErr)
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–∞—à–∞ –≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞
        if hotKeyID.signature == OSType(0x50545400) && hotKeyID.id == 1 {
            let hotkey = HotkeyManager.shared.currentHotkey

            // Carbon Event –∏–º–µ–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É: eventClass + eventKind
            // –ú—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ 2 —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏–π: kEventHotKeyPressed –∏ kEventHotKeyReleased
            // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ isHotkeyPressed —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å —ç—Ç–æ Press –∏–ª–∏ Release

            if !monitor.isHotkeyPressed {
                // –≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ –Ω–∞–∂–∞—Ç–∏—è (–ø–æ—Ç–æ–º—É —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –µ—â–µ –Ω–µ –Ω–∞–∂–∞—Ç–∞)
                monitor.isHotkeyPressed = true
                LogManager.keyboard.info("–ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞ –Ω–∞–∂–∞—Ç–∞: \(hotkey.displayName)")

                DispatchQueue.main.async {
                    monitor.onHotkeyPress?()
                }
            } else {
                // –≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è (–ø–æ—Ç–æ–º—É —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —É–∂–µ –Ω–∞–∂–∞—Ç–∞)
                monitor.isHotkeyPressed = false
                LogManager.keyboard.info("–ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞ –æ—Ç–ø—É—â–µ–Ω–∞: \(hotkey.displayName)")

                DispatchQueue.main.async {
                    monitor.onHotkeyRelease?()
                }
            }

            // –í–ê–ñ–ù–û: CallNextEventHandler –ù–ï –≤—ã–∑—ã–≤–∞–µ–º, —á—Ç–æ–±—ã —Å—ä–µ—Å—Ç—å —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º noErr = —Å–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ò –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –¥–∞–ª—å—à–µ –ø–æ —Ü–µ–ø–æ—á–∫–µ
            return noErr
        }

        return OSStatus(eventNotHandledErr)
    }

    // MARK: - Helper Methods

    /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è CGEventFlags –≤ Carbon –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    private func carbonModifiers(from flags: CGEventFlags) -> UInt32 {
        var modifiers: UInt32 = 0

        if flags.contains(.maskCommand) {
            modifiers |= UInt32(cmdKey)
        }
        if flags.contains(.maskShift) {
            modifiers |= UInt32(shiftKey)
        }
        if flags.contains(.maskAlternate) {
            modifiers |= UInt32(optionKey)
        }
        if flags.contains(.maskControl) {
            modifiers |= UInt32(controlKey)
        }

        return modifiers
    }

    deinit {
        stopMonitoring()
        KeyboardMonitor.shared = nil
        LogManager.keyboard.info("KeyboardMonitor –¥–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    }
}
