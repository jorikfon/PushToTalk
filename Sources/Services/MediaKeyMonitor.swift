import Foundation
import ApplicationServices
import CoreGraphics
import AppKit

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–µ–¥–∏–∞-–∫–Ω–æ–ø–æ–∫ (EarPods, –Ω–∞—É—à–Ω–∏–∫–∏, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç CGEventTap –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ–¥–∏–∞-—Å–æ–±—ã—Ç–∏–π
/// –¢–†–ï–ë–£–ï–¢: Accessibility —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
public class MediaKeyMonitor {
    private var eventTap: CFMachPort?
    private var runLoopSource: CFRunLoopSource?

    // –ö–æ–ª–±—ç–∫–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π (push-to-talk —Å—Ç–∏–ª—å)
    public var onPlayPausePress: (() -> Void)?   // –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ ‚Üí –Ω–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏
    public var onPlayPauseRelease: (() -> Void)? // –û—Ç–ø—É—â–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ ‚Üí –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏

    // –ú–µ–¥–∏–∞-–∫–ª–∞–≤–∏—à–∏ –∫–æ–¥—ã (NX_KEYTYPE_*)
    private let NX_KEYTYPE_PLAY = 16  // Play/Pause
    private let NX_KEYTYPE_FAST = 17  // Next track
    private let NX_KEYTYPE_REWIND = 18  // Previous track

    public init() {
        LogManager.keyboard.info("MediaKeyMonitor: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
    }

    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ–¥–∏–∞-–∫–Ω–æ–ø–æ–∫
    public func startMonitoring() -> Bool {
        LogManager.keyboard.begin("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–µ–¥–∏–∞-–∫–Ω–æ–ø–æ–∫")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Accessibility —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        let trusted = AXIsProcessTrusted()
        if !trusted {
            LogManager.keyboard.failure("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ–¥–∏–∞-–∫–Ω–æ–ø–æ–∫", message: "–¢—Ä–µ–±—É—é—Ç—Å—è Accessibility —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
            return false
        }

        // –°–æ–∑–¥–∞—ë–º event tap –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        // CGEventType 14 = NSEvent.EventType.systemDefined
        let eventMask: CGEventMask = (1 << 14)

        guard let tap = CGEvent.tapCreate(
            tap: .cgSessionEventTap,
            place: .headInsertEventTap,
            options: .defaultTap,
            eventsOfInterest: CGEventMask(eventMask),
            callback: { (proxy, type, event, refcon) -> Unmanaged<CGEvent>? in
                let monitor = Unmanaged<MediaKeyMonitor>.fromOpaque(refcon!).takeUnretainedValue()
                return monitor.handleEvent(proxy: proxy, type: type, event: event)
            },
            userInfo: Unmanaged.passUnretained(self).toOpaque()
        ) else {
            LogManager.keyboard.failure("–°–æ–∑–¥–∞–Ω–∏–µ event tap", message: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å CGEventTap")
            return false
        }

        eventTap = tap

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ run loop
        runLoopSource = CFMachPortCreateRunLoopSource(kCFAllocatorDefault, tap, 0)
        CFRunLoopAddSource(CFRunLoopGetCurrent(), runLoopSource, .commonModes)
        CGEvent.tapEnable(tap: tap, enable: true)

        LogManager.keyboard.success("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ–¥–∏–∞-–∫–Ω–æ–ø–æ–∫ –∑–∞–ø—É—â–µ–Ω")
        return true
    }

    /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ–¥–∏–∞-–∫–Ω–æ–ø–æ–∫
    public func stopMonitoring() {
        LogManager.keyboard.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–µ–¥–∏–∞-–∫–Ω–æ–ø–æ–∫")

        if let tap = eventTap {
            CGEvent.tapEnable(tap: tap, enable: false)
            CFRunLoopRemoveSource(CFRunLoopGetCurrent(), runLoopSource, .commonModes)
            eventTap = nil
            runLoopSource = nil
        }
    }

    // MARK: - Event Handlers

    private func handleEvent(proxy: CGEventTapProxy, type: CGEventType, event: CGEvent) -> Unmanaged<CGEvent>? {
        // –ü–æ–ª—É—á–∞–µ–º NSEvent –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º —Å–æ–±—ã—Ç–∏—è–º
        guard let nsEvent = NSEvent(cgEvent: event) else {
            return Unmanaged.passRetained(event)
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–¥–∏–∞-—Å–æ–±—ã—Ç–∏–µ
        guard nsEvent.type == NSEvent.EventType.systemDefined,
              nsEvent.subtype.rawValue == 8 else {  // subtype 8 = AUX control changed (media keys)
            return Unmanaged.passRetained(event)
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º keyCode –∏ flags –∏–∑ NSEvent.data1
        let data1 = nsEvent.data1
        let keyCode = (data1 & 0xFFFF0000) >> 16
        let keyFlags = data1 & 0x0000FFFF
        let keyDown = ((keyFlags & 0xFF00) >> 8) == 0xA

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ Play/Pause –∫–Ω–æ–ø–∫–∞
        if keyCode == NX_KEYTYPE_PLAY {
            if keyDown {
                LogManager.keyboard.info("üì± Media Key: Play/Pause DOWN")
                handlePlayPausePress()
            } else {
                LogManager.keyboard.info("üì± Media Key: Play/Pause UP")
                handlePlayPauseRelease()
            }

            // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–ª–æ—Å—å –¥–∞–ª—å—à–µ (–Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–∞—Å—å –º—É–∑—ã–∫–∞)
            return nil
        }

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        return Unmanaged.passRetained(event)
    }

    private func handlePlayPausePress() {
        // –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ ‚Üí –Ω–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏
        onPlayPausePress?()
    }

    private func handlePlayPauseRelease() {
        // –û—Ç–ø—É—â–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ ‚Üí –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏
        onPlayPauseRelease?()
    }

    deinit {
        stopMonitoring()
        LogManager.keyboard.info("MediaKeyMonitor –¥–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    }
}
