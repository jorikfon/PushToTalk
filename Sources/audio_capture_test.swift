import Foundation
import AVFoundation
import PushToTalkCore

/// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã AudioCaptureService
/// –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç 3 —Å–µ–∫—É–Ω–¥—ã –∞—É–¥–∏–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ WAV —Ñ–∞–π–ª

@main
struct AudioCaptureTest {
    static func main() async {
        print("=== AudioCaptureService Test ===")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")

        let service = AudioCaptureService()

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω...")
        let hasPermission = await service.checkPermissions()

        if !hasPermission {
            print("‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ")
            print("   –û—Ç–∫—Ä–æ–π—Ç–µ System Settings > Privacy & Security > Microphone")
            print("   –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –¥–ª—è Terminal –∏–ª–∏ –≤–∞—à–µ–≥–æ IDE")
            exit(1)
        }

        print("‚úì –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ\n")

        // –¢–µ—Å—Ç 1: –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–ø–∏—Å—å (3 —Å–µ–∫—É–Ω–¥—ã)
        print("2. –¢–µ—Å—Ç –∫–æ—Ä–æ—Ç–∫–æ–π –∑–∞–ø–∏—Å–∏ (3 —Å–µ–∫—É–Ω–¥—ã)...")
        print("   –ì–æ–≤–æ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω...")

        do {
            try service.startRecording()
            print("   üî¥ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å...")

            // –ñ–¥—ë–º 3 —Å–µ–∫—É–Ω–¥—ã
            try await Task.sleep(nanoseconds: 3_000_000_000)

            let audioData = service.stopRecording()
            print("   ‚èπÔ∏è  –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            let expectedSamples = 48000 // 3 —Å–µ–∫—É–Ω–¥—ã * 16000 Hz
            let tolerance = 1000

            print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            print("   –ó–∞–ø–∏—Å–∞–Ω–æ —Å—ç–º–ø–ª–æ–≤: \(audioData.count)")
            print("   –û–∂–∏–¥–∞–ª–æ—Å—å: ~\(expectedSamples) (¬±\(tolerance))")
            print("   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: \(Float(audioData.count) / 16000.0) —Å–µ–∫—É–Ω–¥")

            if audioData.count > expectedSamples - tolerance &&
               audioData.count < expectedSamples + tolerance {
                print("   ‚úì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ç–º–ø–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            } else {
                print("   ‚ö†Ô∏è  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ç–º–ø–ª–æ–≤ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ")
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è —Å–∏–≥–Ω–∞–ª–∞
            let amplitudes = audioData.map { abs($0) }
            let maxAmplitude = amplitudes.max() ?? 0
            let sum = amplitudes.reduce(0, +)
            let avgAmplitude = sum / Float(audioData.count)

            print("\n–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞:")
            print("   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞: \(maxAmplitude)")
            print("   –°—Ä–µ–¥–Ω—è—è –∞–º–ø–ª–∏—Ç—É–¥–∞: \(avgAmplitude)")

            if maxAmplitude > 0.01 {
                print("   ‚úì –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞—É–¥–∏–æ —Å–∏–≥–Ω–∞–ª")
            } else {
                print("   ‚ö†Ô∏è  –°–∏–≥–Ω–∞–ª –æ—á–µ–Ω—å —Å–ª–∞–±—ã–π, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω")
            }

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ WAV —Ñ–∞–π–ª
            print("\n3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ WAV —Ñ–∞–π–ª...")
            let fileName = "audio_test_\(Int(Date().timeIntervalSince1970)).wav"
            let filePath = FileManager.default.currentDirectoryPath + "/" + fileName

            if saveToWAV(audioData: audioData, filePath: filePath) {
                print("   ‚úì –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: \(filePath)")
                print("   –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–ª—É—à–∞—Ç—å –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π:")
                print("   afplay \(fileName)")
            } else {
                print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª")
            }

        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: \(error)")
            exit(1)
        }

        // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏
        print("\n4. –¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏ (1 —Å–µ–∫—É–Ω–¥–∞)...")

        do {
            try service.startRecording()
            try await Task.sleep(nanoseconds: 1_000_000_000)
            let audioData2 = service.stopRecording()

            print("   ‚úì –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–∞ (\(audioData2.count) —Å—ç–º–ø–ª–æ–≤)")

        } catch {
            print("   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏: \(error)")
        }

        print("\n=== –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ ===")
    }

    /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ WAV —Ñ–∞–π–ª
    static func saveToWAV(audioData: [Float], filePath: String) -> Bool {
        // –°–æ–∑–¥–∞—ë–º AVAudioFormat –¥–ª—è 16kHz mono
        guard let format = AVAudioFormat(
            commonFormat: .pcmFormatFloat32,
            sampleRate: 16000,
            channels: 1,
            interleaved: false
        ) else {
            return false
        }

        // –°–æ–∑–¥–∞—ë–º AVAudioPCMBuffer
        let frameCount = AVAudioFrameCount(audioData.count)
        guard let buffer = AVAudioPCMBuffer(pcmFormat: format, frameCapacity: frameCount) else {
            return false
        }

        buffer.frameLength = frameCount

        // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä
        guard let channelData = buffer.floatChannelData else {
            return false
        }

        for (index, sample) in audioData.enumerated() {
            channelData[0][index] = sample
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        let url = URL(fileURLWithPath: filePath)

        do {
            let audioFile = try AVAudioFile(
                forWriting: url,
                settings: format.settings,
                commonFormat: .pcmFormatFloat32,
                interleaved: false
            )

            try audioFile.write(from: buffer)
            return true

        } catch {
            print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ WAV: \(error)")
            return false
        }
    }
}
